<!DOCTYPE html>
<html lang="ko">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dynamic form transport</title>
    <!-- jquery CDN -->
    <script src="https://code.jquery.com/jquery-3.7.1.min.js" integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>
    <!-- axios CDN -->
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
  </head>
  <body>
    <form name="register">
      <input type="text" name="id" placeholder="ID" value="guho" pattern="^[a-z0-9]{5,12}$" title="소문자, 숫자를 조합한 5글자 이상을 입력해주세요" required>
      <input type="password" name="pw" placeholder="PWD" value="1234">
      <input type="text" name="name" placeholder="이름" required>
      <br>
      <button type="button" onclick="ajaxGet()">ajax get 전송</button>
      <button type="button" onclick="ajaxPost()">ajax post 전송</button>
      <br>
      <button type="button" onclick="axiosGet()">axios get 전송</button>
      <button type="button" onclick="axiosPost()">axios post 전송</button>


      <!-- 아래 두 줄은 일반 폼 전송할 때 type submit 사용 -->
      <!-- <button type="submit">제출</button> -->
      <!-- <input type="submit"></input> -->
      <!--  -->
    </form>
    <h3 id="result"></h3>
    <script>
      function getData() {
        const form = document.forms["register"] //for에서 키 밸류 가져오기

        if (!form.checkValidity()) { //checkValidiry폼의 유효성 검사를 해서 boolean값 반환
          form.reportValidity() //reportValidity 유효성 검사를 통과하지 못한 input에 대해 report
          return; // false를 반환한 것과 동일한 의미로 이해, 다음 코드를 읽지 않음
        }

        const data = {
          id: form.id.value,
          pw: form.pw.value,
          name: form.name.value
        }
        return data
      }

      function ajaxGet() {
        const form = document.forms["register"] //for에서 키 밸류 가져오기
        const data = {
          id: form.id.value,
          pw: form.pw.value,
          name: form.name.value
        }
        $.ajax({
          type: "GET", //폼 속성 중 method
          // url: "/ajax", //폼 속성 중 action
          url: `/ajax?id=${data.id}&pw=${data.pw}&name=${data.name}`,
          data: data,
          success: function(result) { //성공했을시 이벤트 핸들러
            // 매개변수에 응답이 들어옴
            console.log(result)
            $("#result").html(`ajax get 요청 성공 ${result.name}님 환영합니다`)
          }
        })
      }

      function ajaxPost() {
        const data = getData();
        // 
        $.ajax({
          type: "POST", //폼 속성 중 method
          url: "/ajax", //폼 속성 중 action
          data: data,
          success: function(result) { //성공했을시 이벤트 핸들러
            // 매개변수에 응답이 들어옴
            console.log(result)
            $("#result").html(`ajax post 요청 성공 ${result.name}님 환영합니다`)
          }
        })
      }

      function axiosGet() {
        const data = getData()
        // false | object 두가지 형태 중 하나로 반환함

        // axios 함수는 primse 객체를 return
        axios({
          method: "GET",
          url: "/axios",
          // params 대신 url에 직접 query를 작성해도 가능함.
          params: data
        }).then((res) => { // 서버에서 보내준 응답
          console.log("res : ", res)
          console.log("data : ", res.data)
          const {
            name
          } = res.data
          $("#result").html(`axios get 요청 성공 ${name}님 환영합니다`)

        })
      }

      async function axiosPost() {
        const data = getData();
        // 이렇게도 가능

        if (!data) return;
        const res = await axios({
          method: "POST",
          url: "/axios",
          data: data,
        })

        console.log("res", res)
        console.log("res.data", res.data)
        $("#result").html(`axios POST 요청 성공 ${res.data.name}님 환영합니다`)

        // 이렇게 then 사용도 가능
        axios({
          method: "POST",
          url: "/axios",
          data: data,
        }).then((res) => { // 서버에서 보내준 응답
          console.log("res : ", res)
          console.log("data : ", res.data)
          const {
            name
          } = res.data
          $("#result").html(`axios POST 요청 성공 ${name}님 환영합니다`)
        })
      }
    </script>

  </body>
</html>